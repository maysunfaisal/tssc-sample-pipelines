apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: acs-deploy-check
  annotations:
    task.results.format: application/json
    task.results.type: roxctl-deployment-check
    task.results.container: step-report
    task.output.location: logs
spec:
  description: >-
    Policy check a deployment with StackRox/RHACS This tasks allows you to check
    a deployment against build-time policies and apply enforcement to fail
    builds. It's a companion to the stackrox-image-scan task, which returns full
    vulnerability scan results for an image.
  params:
    - name: rox-secret-name
      type: string
      description: |
        Secret containing the StackRox server endpoint and API token with CI permissions under rox-api-endpoint and rox-api-token keys.
        For example: rox-api-endpoint: rox.stackrox.io:443 ; rox-api-token: eyJhbGciOiJS...
    - name: gitops-repo-url
      type: string
      description: URL of gitops repository to check.
    - name: verbose
      type: string
      default: 'true'
    - name: insecure-skip-tls-verify
      type: string
      default: 'false'
      description: |
        When set to `"true"`, skip verifying the TLS certs of the Central endpoint. Defaults to `"false"`.
    - name: gitops-auth-secret-name
      type: string
      default: gitops-auth-secret
      description: |
        Secret of basic-auth type containing credentials to commit into gitops repository.
  volumes:
    - name: repository
      emptyDir: {}
    - name: rox-secret
      secret:
        secretName: $(params.rox-secret-name)
        optional: true
    - name: gitops-auth-secret
      secret:
        secretName: $(params.gitops-auth-secret-name)
        optional: true
  steps:
    - name: annotate-task
      image: registry.redhat.io/openshift4/ose-cli:4.13@sha256:73df37794ffff7de1101016c23dc623e4990810390ebdabcbbfa065214352c7c
      script: |
        #!/usr/bin/env bash
        echo "acs-image-scan $(context.taskRun.name)"
        oc annotate taskrun $(context.taskRun.name) task.results.format=application/json
        oc annotate taskrun $(context.taskRun.name) task.results.type=roxctl-deployment-check
        oc annotate taskrun $(context.taskRun.name) task.results.container=step-report
        oc annotate taskrun $(context.taskRun.name) task.output.location=logs

    - name: rox-deploy-check
      image: quay.io/redhat-appstudio/appstudio-utils:5bd7d6cb0b17f9f2eab043a8ad16ba3d90551bc2@sha256:8c7fcf86af40c71aeb58e4279625c8308af5144e2f6b8e28b0ec7e795260e5f7
      volumeMounts:
        - name: repository
          mountPath: /workspace/repository
        - name: rox-secret
          mountPath: /rox-secret
        - name: gitops-auth-secret
          mountPath: /gitops-auth-secret
      workingDir: /workspace/repository
      env:
        - name: PARAM_INSECURE_SKIP_TLS_VERIFY
          value: $(params.insecure-skip-tls-verify)
        - name: PARAM_GITOPS_REPO_URL
          value: $(params.gitops-repo-url)
      script: |
        #!/usr/bin/env bash
        set +x

        # Check if rox API enpoint is configured
        if test -f /rox-secret/rox-api-endpoint ; then
          export ROX_CENTRAL_ENDPOINT=$(</rox-secret/rox-api-endpoint)
        else
          echo "rox API endpoint is not set, demo will exit with success"
          echo "TODO: configure the pipeline with your ACS server domain. Set your ACS endpoint under 'rox-api-endpoint' key in the secret specified in rox-secret-name parameter. For example: 'rox.stackrox.io:443'"
          exit 0
        fi

        # Check if rox API token is configured
        if test -f /rox-secret/rox-api-token ; then
          export ROX_API_TOKEN=$(</rox-secret/rox-api-token)
        else
          echo "rox API token is not set, demo will exit with success"
          echo "TODO: configure the pipeline to have access to ROXCTL. Set you ACS token under 'rox-api-token' key in the secret specified in rox-secret-name parameter."
          exit 0
        fi

        echo "Using rox central endpoint ${ROX_CENTRAL_ENDPOINT}"

        # Clone gitops repository
        if test -f /gitops-auth-secret/password ; then
          gitops_repo_url=${PARAM_GITOPS_REPO_URL%'.git'}
          remote_without_protocol=${gitops_repo_url#'https://'}

          password=$(cat /gitops-auth-secret/password)
          if test -f /gitops-auth-secret/username ; then
            username=$(cat /gitops-auth-secret/username)
            echo "https://${username}:${password})@${hostname}" > "${HOME}/.git-credentials"
            origin_with_auth=https://${username}:${password}@${remote_without_protocol}.git
          else
            origin_with_auth=https://test:${password}@${remote_without_protocol}
          fi
        else
          echo "git credentials to clone the gitops repository ${PARAM_GITOPS_REPO_URL} is not configured."
          echo "TODO: configure git credentials to clone gitops repository and run acs deploy check."
          exit 0
        fi

        echo "Using gitops repository: ${PARAM_GITOPS_REPO_URL}"
        git clone ${origin_with_auth} --single-branch --depth 1 gitops
        cd gitops
        echo "List of files in gitops repository root:"
        ls -al
        echo "List of components in the gitops repository:"
        ls -l components/

        echo "Download roxctl cli"
        if [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] ; then
          curl_insecure='--insecure'
        fi
        curl $curl_insecure -s -L -H "Authorization: Bearer $ROX_API_TOKEN" \
          "https://${ROX_CENTRAL_ENDPOINT}/api/cli/download/roxctl-linux" \
          --output ./roxctl  \
          > /dev/null
        if [ $? -ne 0 ]; then
          echo 'Failed to download roxctl'
          exit 1
        fi
        chmod +x ./roxctl  > /dev/null

        component_name=$(yq .metadata.name application.yaml)
        echo "Performing scan for ${component_name} component"
        file_to_check="components/${component_name}/base/deployment.yaml"
        if [ -f "$file_to_check" ]; then
          echo "ROXCTL on $file_to_check"
          ./roxctl deployment check \
            $( [ "${PARAM_INSECURE_SKIP_TLS_VERIFY}" = "true" ] && echo -n "--insecure-skip-tls-verify") \
            -e "${ROX_CENTRAL_ENDPOINT}" --file "$file_to_check" --output json \
            > /tmp/roxctl_deployment_check_output.json
          cp /tmp/roxctl_deployment_check_output.json /workspace/repository/acs-deploy-check.json
        else
          echo "Failed to find file to check: $file_to_check"
          exit 2
        fi

    - name: report
      image: registry.access.redhat.com/ubi8-minimal@sha256:d8b81a38b5ad9694742ea03159d3217cd2dde3997b1ee53bbb53c33dd67be7b7
      volumeMounts:
        - name: repository
          mountPath: /workspace/repository
      script: |
        #!/usr/bin/env bash
        cat /workspace/repository/acs-deploy-check.json
